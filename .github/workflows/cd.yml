name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=ref,event=branch
          type=sha,format=long
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        
  check-or-provision-infra:
    needs: build-and-push
    runs-on: ubuntu-latest
    outputs:
      server_ip: ${{ steps.set-ip.outputs.server_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v1

      - name: Check if VM exists
        id: check-vm
        run: |
          set -e
          VM_NAME="marketplace-server-01"
          ZONE="us-west1-a"
          IP=$(gcloud compute instances describe $VM_NAME --zone $ZONE --format='get(networkInterfaces[0].accessConfigs[0].natIP)' || echo "")
          echo "VM_IP=$IP" >> $GITHUB_ENV
          if [ -z "$IP" ]; then
            echo "exists=false" >> $GITHUB_OUTPUT
          else
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "server_ip=$IP" >> $GITHUB_OUTPUT
          fi

      - name: Setup Terraform
        if: steps.check-vm.outputs.exists == 'false'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Provision (if needed)
        if: steps.check-vm.outputs.exists == 'false'
        run: |
          cd infrastructure/terraform
          terraform init
          terraform apply -auto-approve
          IP=$(terraform output -raw server_ip)
          echo "server_ip=$IP" >> $GITHUB_OUTPUT

      - name: Set server IP output
        id: set-ip
        run: |
          if [ -z "${{ steps.check-vm.outputs.server_ip }}" ]; then
            # Ensure we have Terraform available
            if ! command -v terraform &> /dev/null; then
              # Use hashicorp/setup-terraform action directly
              echo "Terraform not found, please ensure the previous Terraform setup step was successful"
              exit 1
            fi
            IP=$(terraform -chdir=infrastructure/terraform output -raw server_ip)
            echo "server_ip=$IP" >> $GITHUB_OUTPUT
          else
            echo "server_ip=${{ steps.check-vm.outputs.server_ip }}" >> $GITHUB_OUTPUT
          fi

  ansible-deploy:
    needs: check-or-provision-infra
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
        
    - name: Add host key
      run: |
        ssh-keyscan -H ${{ needs.check-or-provision-infra.outputs.server_ip }} >> ~/.ssh/known_hosts
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible
        
    - name: Create Ansible inventory
      run: |
        echo "[webservers]" > inventory.ini
        echo "webserver ansible_host=${{ needs.check-or-provision-infra.outputs.server_ip }} ansible_user=ubuntu" >> inventory.ini
        
    - name: Prepare environment variables for Ansible
      run: |
        echo "DOCKER_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${GITHUB_SHA::8}" > .env
        
    - name: Run Ansible playbook
      run: |
        cd infrastructure/ansible
        ansible-playbook -i ../../inventory.ini deploy.yml --extra-vars "@../../.env" 