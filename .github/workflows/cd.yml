name: Continuous Deployment

on:
  push:
    branches: [ gke ]
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
  check-or-provision-infra:
    needs: build-and-push
    runs-on: ubuntu-latest
    outputs:
      cluster_name: ${{ steps.cluster-info.outputs.cluster_name }}
      cluster_location: ${{ steps.cluster-info.outputs.cluster_location }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v1

      - name: Check if GKE cluster exists
        id: check-cluster
        run: |
          set -e
          CLUSTER_NAME="marketplace-cluster"
          REGION="us-west1"
          CLUSTER_INFO=$(gcloud container clusters describe $CLUSTER_NAME --region $REGION --format='json' 2>/dev/null || echo "")
          if [ -z "$CLUSTER_INFO" ]; then
            echo "exists=false" >> $GITHUB_OUTPUT
          else
            echo "exists=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup Terraform
        if: steps.check-cluster.outputs.exists == 'false'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Provision (if needed)
        if: steps.check-cluster.outputs.exists == 'false'
        run: |
          cd infrastructure/terraform/gcp
          terraform init
          terraform apply -auto-approve

      - name: Get Cluster Info
        id: cluster-info
        run: |
          CLUSTER_NAME="marketplace-cluster"
          REGION="us-west1"
          echo "cluster_name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
          echo "cluster_location=$REGION" >> $GITHUB_OUTPUT

  kubernetes-deploy:
    needs: [build-and-push, check-or-provision-infra]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Setup gcloud
      uses: google-github-actions/setup-gcloud@v1
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ needs.check-or-provision-infra.outputs.cluster_name }} \
          --region ${{ needs.check-or-provision-infra.outputs.cluster_location }} \
          --project ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f kubernetes/deployment.yaml
        kubectl apply -f kubernetes/service.yaml
        
    - name: Force rolling restart
      run: |
        kubectl rollout restart deployment/energy-marketplace-frontend
    
    - name: Wait for deployment rollout
      run: |
        kubectl rollout status deployment/energy-marketplace-frontend --timeout=5m
        
    - name: Get LoadBalancer IP
      run: |
        echo "Waiting for LoadBalancer to get an external IP..."
        for i in {1..30}; do
          EXTERNAL_IP=$(kubectl get service energy-marketplace-frontend -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -n "$EXTERNAL_IP" ]; then
            echo "Application is accessible at: http://$EXTERNAL_IP"
            break
          fi
          echo "Still waiting for external IP... ($i/30)"
          sleep 10
        done 